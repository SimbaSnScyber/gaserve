/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ErrorDTO;
import io.swagger.model.ReceivingsDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-10T18:26:17.750Z")

@Api(value = "receivings", description = "the receivings API")
public interface ReceivingsApi {

    @ApiOperation(value = "add an receiving product", nickname = "addReceiving", notes = "Adds Recieving to the system", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "item created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid", response = ErrorDTO.class),
        @ApiResponse(code = 409, message = "an existing item already exists", response = ErrorDTO.class),
        @ApiResponse(code = 500, message = "Unxected Error", response = ErrorDTO.class) })
    @RequestMapping(value = "/receivings",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addReceiving(@ApiParam(value = "Recieving item to add"  )  @Valid @RequestBody ReceivingsDTO product);


    @ApiOperation(value = "search for all received recevings.", nickname = "getRecieving", notes = "By passing in the appropriate options, you can search for Recieved", response = ReceivingsDTO.class, responseContainer = "List", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search successful", response = ReceivingsDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/receivings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ReceivingsDTO>> getRecieving(@Min(0) @Max(50) @ApiParam(value = "maximum number of records to return") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "search for received product by name.", nickname = "receivingsReceivingIdGet", notes = "By passing in the product name, you can search for Recieved", response = ReceivingsDTO.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A receving was found", response = ReceivingsDTO.class),
        @ApiResponse(code = 404, message = "Invalid Receiving Id"),
        @ApiResponse(code = 500, message = "Unxected Error", response = ErrorDTO.class) })
    @RequestMapping(value = "/receivings/{receivingId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ReceivingsDTO> receivingsReceivingIdGet(@ApiParam(value = "The id of the receiveing",required=true) @PathVariable("receivingId") String receivingId);

}
