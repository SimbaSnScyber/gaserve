/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.UpdateUser;
import io.swagger.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-10T20:50:13.667Z")

@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "Adding a new user", nickname = "addUser", notes = "Adds a new user", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User created"),
        @ApiResponse(code = 400, message = "Invalid User object", response = Error.class),
        @ApiResponse(code = 409, message = "User already exists", response = Error.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addUser(@ApiParam(value = "user object to be added"  )  @Valid @RequestBody User user);


    @ApiOperation(value = "gets user by id", nickname = "getUserById", notes = "Returns a user object", response = User.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 204, message = "No content", response = Error.class),
        @ApiResponse(code = 400, message = "Bad Request.", response = Error.class),
        @ApiResponse(code = 404, message = "User not found", response = Error.class),
        @ApiResponse(code = 500, message = "Unexpected Error.", response = Error.class) })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUserById(@ApiParam(value = "Id of the user being retrieved",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "gets all users", nickname = "getUsers", notes = "Returns the list of all users", response = User.class, responseContainer = "List", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "No content", response = Error.class),
        @ApiResponse(code = 400, message = "Bad Request.", response = Error.class),
        @ApiResponse(code = 404, message = "User not found", response = Error.class),
        @ApiResponse(code = 500, message = "Unexpected Error.", response = Error.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getUsers();


    @ApiOperation(value = "update a user", nickname = "updateUser", notes = "updates user information", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User was updated successfully"),
        @ApiResponse(code = 400, message = "Invalid User object", response = Error.class),
        @ApiResponse(code = 404, message = "User does not exists", response = Error.class),
        @ApiResponse(code = 500, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@ApiParam(value = "user id to be updated",required=true) @PathVariable("id") String id,@ApiParam(value = "user object to be added"  )  @Valid @RequestBody UpdateUser user);

}
