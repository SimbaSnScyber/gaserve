/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ErrorDTO;
import io.swagger.model.HttpResponseBody;
import org.threeten.bp.LocalDate;
import io.swagger.model.SaleDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-22T18:20:11.403Z")

@Api(value = "sales", description = "the sales API")
public interface SalesApi {

    @ApiOperation(value = "Add a new sale(s) to the sales DB", nickname = "addSales", notes = "Add a new sale(s) to the sales DB", tags={ "sale", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 404, message = "Invalid Receiving Id"),
        @ApiResponse(code = 405, message = "Invalid input", response = ErrorDTO.class),
        @ApiResponse(code = 500, message = "Unxected Error", response = ErrorDTO.class) })
    @RequestMapping(value = "/sales",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<HttpResponseBody> addSales(@ApiParam(value = "Sale(s) object that nedds to be added to DB" ,required=true )  @Valid @RequestBody SaleDTO sales, @RequestHeader("userId") String userId);


    @ApiOperation(value = "Retrieve as Sales by search criteria", nickname = "salesGet", notes = "Pass a specific search criteria for sales", response = SaleDTO.class, responseContainer = "List", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "sales were found by the criteria", response = SaleDTO.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Invalid Sale Id", response = ErrorDTO.class),
        @ApiResponse(code = 500, message = "Unxected Error", response = ErrorDTO.class) })
    @RequestMapping(value = "/sales",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<SaleDTO>> salesGet(@ApiParam(value = "The start date of the sales") @Valid @RequestParam(value = "fromDate", required = false) LocalDate fromDate,@ApiParam(value = "The end date of the sales") @Valid @RequestParam(value = "toDate", required = false) LocalDate toDate);


    @ApiOperation(value = "Retrieve as Sale by id", nickname = "salesIdGet", notes = "Pass a specific id to retrieve the correspoding sale", response = SaleDTO.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A sale was found by the id", response = SaleDTO.class),
        @ApiResponse(code = 404, message = "Invalid Sale Id", response = ErrorDTO.class),
        @ApiResponse(code = 500, message = "Unxected Error", response = ErrorDTO.class) })
    @RequestMapping(value = "/sales/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<SaleDTO> salesIdGet(@ApiParam(value = "The id of the sale",required=true) @PathVariable("id") String id);

}
